<?php

/**
 * @file
 * Shipping quote module that defines a weight shipping rate for each product.
 */


/**
 * Implements hook_menu().
 */
function uc_weightrate_menu() {
  $items = array();

  $items['admin/store/settings/quotes/methods/weightrate/add'] = array(
    'title' => 'Add weight rate quote',
    'description' => 'Create a new weight rate shipping quote.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_weightrate_admin_method_edit_form'),
    'access arguments' => array('configure quotes'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'uc_weightrate.admin.inc',
  );
  $items['admin/store/settings/quotes/methods/weightrate/%'] = array(
    'title' => 'Edit weight rate method',
    'description' => 'Edit an existing weight rate shipping quote.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_weightrate_admin_method_edit_form', 6),
    'access arguments' => array('configure quotes'),
    'file' => 'uc_weightrate.admin.inc',
  );
  $items['admin/store/settings/quotes/weightrate/%/delete'] = array(
    'title' => 'Delete weight rate method',
    'description' => 'Delete a weight rate shipping quote.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_weight rate_admin_method_confirm_delete', 5),
    'access arguments' => array('configure quotes'),
    'file' => 'uc_weightrate.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 *
 * Adds a form element for the shipping rate of a product.
 */
function uc_weightrate_form_alter(&$form, &$form_state, $form_id) {
  if (uc_product_is_product_form($form)) {
    $weight = variable_get('uc_quote_method_weight', array());
    $result = db_query("SELECT mid, title, product_rate FROM {uc_weightrate_methods}");
    foreach ($result as $method) {
      // Ensure default weight is set.
      $weight += array('weightrate_' . $method->mid => 0);

      if (!isset($form['shipping']['weightrate'])) {
        $form['shipping']['weightrate'] = array(
          '#type' => 'fieldset',
          '#title' => t('weight shipping rates'),
          '#description' => t("Overrides the default shipping rate per product for each weight rate shipping method. Leave field empty to use the method's default value."),
          '#tree' => TRUE,
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
          '#weight' => 0,
        );
      }
      $form['shipping']['weightrate'][$method->mid] = array(
        '#type' => 'uc_price',
        '#title' => check_plain($method->title),
        '#default_value' => isset($form['#node']->weightrate[$method->mid]) ? $form['#node']->weightrate[$method->mid] : '',
        '#description' => t('Default rate: %price', array('%price' => uc_currency_format($method->product_rate))),
        '#weight' => $weight['weightrate_' . $method->mid],
        '#empty_zero' => FALSE,
      );
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function uc_weightrate_node_insert($node) {
  uc_weightrate_node_update($node);
}

/**
 * Implements hook_node_update().
 */
function uc_weightrate_node_update($node) {
  if (uc_product_is_product($node->type)) {
    if (isset($node->weightrate) && is_array($node->weightrate)) {
      if (empty($node->revision)) {
        db_delete('uc_weightrate_products')
          ->condition('vid', $node->vid)
          ->execute();
      }

      $query = db_insert('uc_weightrate_products')
        ->fields(array('vid', 'nid', 'mid', 'rate'));

      foreach ($node->weightrate as $mid => $rate) {
        if (is_numeric($rate) && $rate >= 0) {
          $query->values(array(
              'vid' => $node->vid,
              'nid' => $node->nid,
              'mid' => $mid,
              'rate' => $rate,
            ));
        }
      }

      $query->execute();
    }
  }
}

/**
 * Implements hook_node_load().
 */
function uc_weightrate_node_load($nodes, $types) {
  $vids = array();
  $product_types = uc_product_types();

  foreach ($nodes as &$node) {
    if (in_array($node->type, $product_types)) {
      $vids[$node->nid] = $node->vid;
    }
  }

  if ($vids) {
    $result = db_query("SELECT nid, mid, rate FROM {uc_weightrate_products} WHERE vid IN (:vids)", array(':vids' => $vids));
    foreach ($result as $method) {
      $nodes[$method->nid]->weightrate[$method->mid] = $method->rate;
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function uc_weightrate_node_delete($node) {
  db_delete('uc_weightrate_products')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_revision_delete().
 */
function uc_weightrate_node_revision_delete($node) {
  db_delete('uc_weightrate_products')
    ->condition('vid', $node->vid)
    ->execute();
}

/**
 * Implements hook_uc_shipping_method().
 */
function uc_weightrate_uc_shipping_method() {
  $methods = array();

  $result = db_query("SELECT mid, title, label, base_rate, product_rate, aditional_weight_class FROM {uc_weightrate_methods}");
  foreach ($result as $method) {
    $methods['weightrate_' . $method->mid] = array(
      'id' => 'weightrate_' . $method->mid,
      'module' => 'uc_weightrate',
      'title' => $method->title,
      'description' => t('!base_rate + !product_rate each !weight g', array('!base_rate' => uc_currency_format($method->base_rate), '!product_rate' => uc_currency_format($method->product_rate),'!weight'=>intval($method->aditional_weight_class))),
      'operations' => array(
        'edit' => array(
          'title' => t('edit'),
          'href' => 'admin/store/settings/quotes/methods/weightrate/' . $method->mid,
        ),
        'delete' => array(
          'title' => t('delete'),
          'href' => 'admin/store/settings/quotes/weightrate/' . $method->mid . '/delete',
        ),
      ),
      'quote' => array(
        'type' => 'order',
        'callback' => 'uc_weightrate_quote',
        'accessorials' => array(
          $method->label,
        ),
      ),
      'enabled' => TRUE,
    );
  }

  return $methods;
}

/**
 * Standard callback to return a shipping rate via the weight rate method.
 *
 * @param $products
 *   The order's products.
 * @param $details
 *   Other order details including a shipping address.
 * @param $method
 *   The shipping method to use to create the quote.
 *
 * @return
 *   An array containing the shipping quote for the order.
 */
function uc_weightrate_quote($products, $details, $method) {
  $method = explode('_', $method['id']);
  $mid = $method[1];

  if ($method = db_query("SELECT * FROM {uc_weightrate_methods} WHERE mid = :mid", array(':mid' => $mid))->fetchObject()) {
    // Start at the base rate.
    $rate = $method->base_rate;
	
	$totalWight = 0;
	echo "<pre>";

    foreach ($products as $product) {

		$totalWight += $product->weight * $product->qty;
		
    }
	
	$initialWeight = $method->initial_weight;
	$aditinalWeight = $totalWight - $initialWeight;
	$additianalWeightRate = 0;
	
	if($aditinalWeight > 0 ){
		$weightClasses = ceil($aditinalWeight/$method->aditional_weight_class);
		$additianalWeightRate = $weightClasses * $method->product_rate;
	}
	$rate = $rate + $additianalWeightRate;


    $quotes[] = array(
      'rate' => $rate,
      'label' => check_plain($method->label),
      'option_label' => check_plain($method->label),
    );
  }

  return $quotes;
}
